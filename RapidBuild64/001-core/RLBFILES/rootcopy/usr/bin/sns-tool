#!/bin/bash

## Global variables

dir="/tmp/sns-tool"
file="$dir/etc/rc.d/rc.local"
supplicant="$dir/etc/wpa_supplicant.conf"
inet="$dir/etc/rc.d/rc.inet1"
c='\e[36m'
r='\e[31m'
e=`tput sgr0`
# Clearing old files from previous sns-tool run (if any)
rm -r $dir > /dev/null 2>&1
rm /root/sns-tool-configs.lzm > /dev/null 2>&1
rm -r /etc/dhcpc/* > /dev/null 2>&1
rm -r /var/run/wpa_supplicant/ > /dev/null 2>&1

mkdir $dir && mkdir $dir/etc && mkdir $dir/etc/rc.d
clear
# Killing running instances of dhcpcd and wpa_supplicant (if any)
proc1=`ps x | grep wpa_supplicant | awk '{print $1}' | head -n1`
proc2=`ps x | grep dhcpcd | awk '{print $1}' | head -n1`
kill -9 $proc1 > /dev/null 2>&1
kill -9 $proc2 > /dev/null 2>&1
# once again to be 100% sure :)
unset proc1 && unset proc2
proc1=`ps x | grep wpa_supplicant | awk '{print $1}' | head -n1`
proc2=`ps x | grep dhcpcd | awk '{print $1}' | head -n1`
kill -9 $proc1 > /dev/null 2>&1
kill -9 $proc2 > /dev/null 2>&1

## Starting the script
# Welcome message
echo -e "${c}Script by fanthom,

Welcome in Slax-Network-Setup-Tool, this script will let you configure your wired/wireless network device.
First of all i need to gather required information so please answer all the questions carefully.
After each comment field press enter to move forward.
Remember - you can break this script at any time by pressing ctrl+c without any harm to your current system configuration.

press enter to proceed."$e
read
clear
echo -e "${c}This is the list of available interfaces, 
if your network card is not listed below then load all necessary drivers/firmware and restart this script.
Some useful debug information can be found by running dmesg in terminal,for example 'dmesg | grep firmware' command should 
reveal if you need the additional firmware for your device"$e;echo
ls /sys/class/net;echo
echo -e "${c}please give the name of the interface which you want to configure (eth0,ath1,wlan0) or type '?' for more detailed info"$e
read -e dev;echo
if [ "$dev" = "?" ]; then
echo -e "${r}this is output of ifconfig command:"$e;echo;echo
ifconfig
echo -e "${r}this is output of iwconfig command"$e;echo;echo
iwconfig
echo -e "${c}please give the name of the interface which you want to configure (eth0,ath1,wlan0) or press ctrl+c to exit:"$e
read -e dev
fi
ifconfig $dev up
echo -e "${c}do you want to obtain ip address through dhcp server? (must be avail in the network) y/n"$e
read -e dhcp; echo
YES() {
echo -e "${r}good, dhcpd makes the life easier"$e;echo
}
NO() {
echo -e "${c}please type in ip address for the $dev (ie 192.168.1.10):"$e
read -e ip
echo "ifconfig $dev $ip" >> $file
echo -e "${c}please type in ip address of the router/gateway (ie 192.168.1.1):"$e
read -e router
echo "route add default gw $router $dev" >> $file
echo -e "${c}please provide ip address of the DNS service (ie Google DNS: 8.8.8.8):"$e
read -e DNS
echo "echo "nameserver $DNS" > /etc/resolv.conf" >> $file
# Disabling dhcpcd service
cp /etc/rc.d/rc.inet1 $inet
sed -i $inet -e 's/echo/#echo/g'
sed -i $inet -e 's@/sbin@#/sbin@g'
}
case "$dhcp" in
y) YES ;;
n) NO ;;
*)
echo -e "${c}choose y or n"$e
exit 1 ;;
esac
echo -e "${c}is $dev a wifi card? y/n"$e
read -e wifi
NO() {
echo -e "${r}everything is set up now, let's go to testing stage..."$e
}
YES() {
clear
# Disabling wired networks
#ifconfig eth0 down > /dev/null 2>&1 & ifconfig eth1 down > /dev/null 2>&1 & ifconfig eth2 down > /dev/null 2>&1
echo -e "${c}this is the list of all avail wifi networks in your neighbourhood - wait for scan"$e;echo
iwlist $dev sc | grep ESSID;echo
echo -e "${c}please provide the name (ESSID) of your wifi network (put quotes only if they are included in the name of wifi network),
type '?' for more detailed info or press enter if essid is hidden"$e
read -e ssid;echo
if [ ! "$ssid" = "" ]; then
ssid="$ssid"
else
echo -e "${c}please provide the name (ESSID) of your hidden AP:"$e
read -e ssid;echo
echo -e "${c}'scan_ssid=1' mode is enabled by default. some drivers doesn't support it so 'ap_mode=2' mode is required.
do you want to add it to the config file? y/n"$e
read -e scan;echo
fi
if [ "$ssid" = "?" ]; then
iwlist $dev sc;echo
echo -e "${c}please provide the name (ESSID) of your wifi network"$e
read -e ssid;echo
fi
echo -e "${c}enter custom MAC address for $dev or press enter to stay with original one:"$e
read -e mac; echo
if [ ! "$mac" = "" ]; then
ifconfig $dev hw ether $mac;echo
echo "#ifconfig $dev hw ether $mac" >> $file
fi
echo -e "${c}do you want to enable ad-hoc mode on $dev? y/n"$e
read -e hoc; echo
echo -e "${c}choose encryption mode for your wireless device:"$e
echo -e "${c}1 - open network"$e
echo -e "${c}2 - WEP encryption (weak)"$e
echo -e "${c}3 - WPA (strong)"$e
echo -e "${c}4 - WPA2 (recommended)"$e; echo
read encr;echo
OPEN() {
echo -e "${c}your wifi network will stay open"$e
echo "# Plaintext (no encryption) network
ctrl_interface=/var/run/wpa_supplicant" > $supplicant
if [ "$scan" = "y" ] > /dev/null 2>&1; then 
echo "ap_scan=2" >> $supplicant
fi
echo "network={" >> $supplicant
if [ "$hoc" = "y" ]; then
echo "mode=1" >> $supplicant
fi
echo "scan_ssid=1
ssid=$ssid
key_mgmt=NONE
}" >> $supplicant
sed -i $supplicant -e s/ssid="$ssid"/ssid='"'"$ssid"'"'/g
echo "#wpa_supplicant -Dwext -i$dev -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $file
echo -e "${r}setup is complete, let's go to testing stage..."$e
}
WEP() {
echo -e "${c}please provide the WEP key in HEX format, ie:751E51F12091ACAA2D9AD3E2F0"$e
read -e key
echo "# Static WEP key
ctrl_interface=/var/run/wpa_supplicant" > $supplicant
if [ "$scan" = "y" ] > /dev/null 2>&1; then
echo "ap_scan=2" >> $supplicant
fi
echo "network={" >> $supplicant
if [ "$hoc" = "y" ]; then
echo "mode=1" >> $supplicant
fi
echo "scan_ssid=1
ssid=$ssid
key_mgmt=NONE
wep_key0=$key
wep_tx_keyidx=0
}" >> $supplicant
sed -i $supplicant -e s/ssid="$ssid"/ssid='"'"$ssid"'"'/g

echo "#wpa_supplicant -Dwext -i$dev -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $file
echo -e "${r}setup is complete, let's go to testing stage..."$e
}
WPA() {
echo -e "${c}please provide the WPA password:"$e
read -e key
echo "# WPA-PSK/TKIP
ctrl_interface=/var/run/wpa_supplicant" > $supplicant
if [ "$scan" = "y" ] > /dev/null 2>&1; then
echo "ap_scan=2" >> $supplicant
fi
echo "network={" >> $supplicant
if [ "$hoc" = "y" ]; then
echo "mode=1" >> $supplicant
fi
echo "scan_ssid=1
ssid=$ssid
key_mgmt=WPA-PSK
proto=WPA
pairwise=TKIP
group=TKIP
psk=$key
}" >> $supplicant
sed -i $supplicant -e s/ssid="$ssid"/ssid='"'"$ssid"'"'/g
sed -i $supplicant -e s/psk="$key"/psk='"'"$key"'"'/g
if [ $hoc = "y" ]; then
sed -i $supplicant -e s/key_mgmt=WPA-PSK/key_mgmt=WPA-NONE/g
sed -i $supplicant -e s/pairwise=TKIP/pairwise=NONE/g
fi
echo "#wpa_supplicant -Dwext -i$dev -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $file
echo -e "${r}setup is complete, let's go to testing stage..."$e
}
WPA2() {
echo -e "${c}please provide the WPA2 password:"$e
read -e key
PSK=`wpa_passphrase "$ssid" "$key" | grep psk=[a-f,0-9] | cut -d '=' -f 2`
echo "# WPA2-PSK/CCMP
ctrl_interface=/var/run/wpa_supplicant" > $supplicant
if [ "$scan" = "y" ] > /dev/null 2>&1; then
echo "ap_scan=2" >> $supplicant
fi
echo "network={" >> $supplicant
if [ "$hoc" = "y" ]; then
echo "mode=1" >> $supplicant
fi
echo "scan_ssid=1
ssid=$ssid
key_mgmt=WPA-PSK
proto=WPA2
pairwise=CCMP
group=CCMP
psk=$PSK
}" >> $supplicant
sed -i $supplicant -e s/ssid="$ssid"/ssid='"'"$ssid"'"'/g
if [ "$hoc" = "y" ]; then
sed -i $supplicant -e s/key_mgmt=WPA-PSK/key_mgmt=WPA-NONE/g
sed -i $supplicant -e s/proto=WPA2/proto=WPA/g
sed -i $supplicant -e s/pairwise=CCMP/pairwise=NONE/g
fi
echo "#wpa_supplicant -Dwext -i$dev -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $file
echo -e "${r}setup is complete, let's go to testing stage..."$e
}
case "$encr" in
1) OPEN ;;
2) WEP ;;
3) WPA ;;
4) WPA2 ;;
*)
echo -e "${r}Choose 1,2,3 or 4"$e
exit 1 ;;
esac
}
case "$wifi" in
y) YES ;;
n) NO ;;
*)
echo -e "${r}Choose y or n"$e
exit 1 ;;
esac
echo -e "${c}please confirm (or even edit in case of making a mistake) that configuration file is correct,
press "ESC" twice to leave editor from every configuration file."$e
read
if [ -e $file ]; then
mcedit $file;fi
if [ -e $supplicant ]; then
mcedit $supplicant;fi
if [ -e $file ]; then
chmod +x $file
$file & > /dev/null 2>&1
fi
if [ "$wifi" = "y" ]; then
sed -i $file -e 's/#wpa_supplicant/wpa_supplicant/g'
fi
if [ ! "$mac" = "" ]; then
sed -i $file -e 's/#ifconfig/ifconfig/g'
fi
clear
if [ -e $supplicant ]; then
wpa_supplicant -D wext -i $dev -c $supplicant &
fi
if [ "$dhcp" = "y" ]; then
echo
sleep 5
dhcpcd $dev &
echo -e "${r}wait few seconds for dhcpcd which need to acquire all details for your device,
in case of troubles please paste debug info in this thread:
http://www.slax.org/forum.php?action=view&parentID=55124"$e
	GAT=`route -nee | grep $dev | tail -n1 | awk '{print $2}' | cut -d '.' -f1`
	while [ "$GAT" = "" ]; do
	sleep 1
	unset $GAT > /dev/null 2>&1
	GAT=`route -nee | grep $dev | tail -n1 | awk '{print $2}' | cut -d '.' -f1`
	done
	RTE=`route -nee | grep $dev | tail -n1 | awk '{print $2}' | cut -d '.' -f1`
	while [ $RTE = 0 ]; do
	sleep 1
	unset $GAT > /dev/null 2>&1
	RTE=`route -nee | grep $dev | tail -n1 | awk '{print $2}' | cut -d '.' -f1`
	echo $RTE
	done
echo
echo -e "${r}all is fine now, proceeding..."$e
fi
if [ "$dhcp" = "n" ]; then
if [ "$wifi" = "y" ]; then
echo -e "${c}wait few seconds for association, in case of troubles please paste debug info in this thread:
http://www.slax.org/forum.php?action=view&parentID=55124

press enter when association will be completed"$e
read
fi
fi
if [ "$hoc" = "y" ] > /dev/null 2>&1; then
echo
echo -e "${c}type in IP address of second PC which works in ad-hoc mode"$e
read -e pc
echo
echo -e "${c}now i will try to ping $pc. When you get an response, close xterm window and press enter to continue"$e
echo
xterm -T AD-HOC -geometry 70x20+750+80 -fg green -bg black -e "ping $pc" > /dev/null 2>&1
else
echo -e "${c}lets check if your connection works, press enter when ready"$e
read
echo -e "${c}first i will try to ping the gateway to check connection between $dev and router/AP"$e
echo -e "${c}when you get an response, close xterm window and press enter to continue"$e
if [ "$dhcp" = "n" ]; then
xterm -T GATEWAY -geometry 70x20+750+80 -fg green -bg black -e "ping -I $dev $router" > /dev/null 2>&1
else
AP=`route -nee | grep $dev | tail -n1 | awk '{print $2}'`
xterm -T GATEWAY -geometry 70x20+750+80 -fg green -bg black -e "ping -I $dev $AP" > /dev/null 2>&1
fi
read
echo -e "${c}now i will try to test connection between $dev and internet, close xterm window and press enter if ok"$e
xterm -T INTERNET -geometry 70x20+750+80 -fg green -bg black -e "ping 8.8.8.8" > /dev/null 2>&1
read
echo -e "${c}last test - Domain Name Service, close xtem window and press enter if ok"$e
xterm -T DNS -geometry 70x20+750+80 -fg green -bg black -e "ping kernel.org" > /dev/null 2>&1
read
fi
clear
echo -e "${c}If all tests went fine, you need to copy 'ready to go' config files from $dir to the correct places in your system
(consider adding content of $file to existing /etc/rc.d/rc.local, other files need to be replaced):"$e
echo -e "${r}a) $file and $inet should be placed in /etc/rc.d/
b) $supplicant must go to /etc/"$e
echo -e "${c}If some of the files mentioned above are missing in $dir then simply you don't need them in specified configuration.

Instead of copying those files manually i can create a slax module which will be placed in /root directory, do you want me to do it? y/n"$e
read -e module
if [ "$module" = "y" ]; then
mksquashfs $dir /root/sns-tool-configs.sq4.lzm
echo -e "${c}module created as /root/sns-tool-configs.lzm - copy it to your /slax/modules directory and reboot slax-remix.
press enter to go directly to the /root directory.
Thanks for using my tool,

Regards,
fanthom"$e
read
dolphin /root &
else
echo -e "${c}press enter to go directly to the config files.
Thanks for using my tool

Regards,
fanthom"$e
read
dolphin $dir &
fi
